#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require "predicator/lexer.rex"
require "predicator/visitors"
require "predicator/ast"
module Predicator
  class Parser < Racc::Parser

    def initialize
      @lexer = Lexer.new
    end

    def parse string
      @lexer.parse string
      do_parse
    end

    def next_token
      @lexer.next_token
    end

    def on_error type, val, values
      super
    rescue Racc::ParseError
      trace = values.each_with_index.map{|l, i| "#{' ' * i}#{l}"}
      raise ParseError, "\nparse error on value #{val.inspect}\n#{trace.join("\n")}"
    end

##### State transition tables begin ###

racc_action_table = [
     6,     7,     9,    26,     8,     6,     7,     9,    34,     8,
    27,    30,    16,    15,    17,    19,    20,    16,    15,    17,
     6,     7,     9,   nil,     8,     6,     7,     9,   nil,     8,
    19,    20,    16,    15,    17,   nil,    18,    16,    15,    17,
     6,     7,     9,   nil,     8,    19,    20,    23,    24,    25,
    19,    20,    16,    15,    17,    16,    15,    17,    16,    15,
    17,    16,    15,    17,    19,    20 ]

racc_action_check = [
     0,     0,     0,    12,     0,     8,     8,     8,    26,     8,
    18,    22,     0,     0,     0,    22,    22,     8,     8,     8,
     9,     9,     9,   nil,     9,    19,    19,    19,   nil,    19,
    29,    29,     9,     9,     9,   nil,     1,    19,    19,    19,
    20,    20,    20,   nil,    20,     1,     1,    10,    10,    10,
    21,    21,    20,    20,    20,    23,    23,    23,    24,    24,
    24,    25,    25,    25,    28,    28 ]

racc_action_pointer = [
    -2,    36,   nil,   nil,   nil,   nil,   nil,   nil,     3,    18,
    36,   nil,    -4,   nil,   nil,   nil,   nil,   nil,    10,    23,
    38,    41,     6,    41,    44,    47,    -8,   nil,    55,    21,
   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -19,   -23,    -1,    -2,    -3,    -4,    -5,    -6,   -19,   -19,
   -23,   -14,   -15,   -16,   -17,   -18,   -20,   -21,   -23,   -19,
   -19,    -7,   -23,   -19,   -19,   -19,   -23,    35,    -8,    -9,
   -10,   -11,   -12,   -13,   -22 ]

racc_goto_table = [
     1,    31,    32,    33,   nil,   nil,   nil,   nil,    21,    22,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,
    29 ]

racc_goto_check = [
     1,     6,     6,     6,   nil,   nil,   nil,   nil,     1,     1,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     1,
     1 ]

racc_goto_pointer = [
   nil,     0,   nil,   nil,   nil,   nil,   -22,   nil,   nil,   nil,
   nil ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,     5,    10,    11,    12,    13,
    14 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none,
  1, 19, :_reduce_5,
  1, 19, :_reduce_6,
  2, 20, :_reduce_7,
  3, 20, :_reduce_8,
  3, 20, :_reduce_9,
  3, 21, :_reduce_10,
  3, 22, :_reduce_11,
  3, 22, :_reduce_12,
  3, 22, :_reduce_13,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 26, :_reduce_18,
  0, 27, :_reduce_none,
  1, 27, :_reduce_20,
  1, 25, :_reduce_21,
  3, 25, :_reduce_22 ]

racc_reduce_n = 23

racc_shift_n = 35

racc_token_table = {
  false => 0,
  :error => 1,
  :TRUE => 2,
  :FALSE => 3,
  :LPAREN => 4,
  :RPAREN => 5,
  :BANG => 6,
  :DOT => 7,
  :AT => 8,
  :AND => 9,
  :OR => 10,
  :EQ => 11,
  :GT => 12,
  :LT => 13,
  :INTEGER => 14,
  :STRING => 15,
  :IDENTIFIER => 16 }

racc_nt_base = 17

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "TRUE",
  "FALSE",
  "LPAREN",
  "RPAREN",
  "BANG",
  "DOT",
  "AT",
  "AND",
  "OR",
  "EQ",
  "GT",
  "LT",
  "INTEGER",
  "STRING",
  "IDENTIFIER",
  "$start",
  "predicate",
  "boolean_predicate",
  "logical_predicate",
  "group_predicate",
  "comparison_predicate",
  "value",
  "scalar",
  "variable",
  "string",
  "literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

def _reduce_5(val, _values)
 AST::True.new true 
end

def _reduce_6(val, _values)
 AST::False.new false 
end

def _reduce_7(val, _values)
 AST::Not.new val.last 
end

def _reduce_8(val, _values)
 AST::And.new val.first, val.last 
end

def _reduce_9(val, _values)
 AST::Or.new val.first, val.last 
end

def _reduce_10(val, _values)
 AST::Group.new val[1] 
end

def _reduce_11(val, _values)
 AST::Equal.new val.first, val.last 
end

def _reduce_12(val, _values)
 AST::GreaterThan.new val.first, val.last 
end

def _reduce_13(val, _values)
 AST::LessThan.new val.first, val.last 
end

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

def _reduce_18(val, _values)
 AST::String.new val.first 
end

# reduce 19 omitted

def _reduce_20(val, _values)
 AST::Integer.new val.first.to_i 
end

def _reduce_21(val, _values)
 AST::Variable.new val.first 
end

def _reduce_22(val, _values)
 AST::Variable.new [val.first, val.last].flatten.join(".") 
end

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
  end   # module Predicator
