#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require "predicator/lexer.rex"
require "predicator/visitors"
require "predicator/ast"
module Predicator
  class Parser < Racc::Parser

    def initialize
      @lexer = Lexer.new
    end

    def parse string
      @lexer.parse string
      do_parse
    end

    def next_token
      @lexer.next_token
    end

    def on_error type, val, values
      super
    rescue Racc::ParseError
      trace = values.each_with_index.map{|l, i| "#{' ' * i}#{l}"}
      raise ParseError, "\nparse error on value #{val.inspect}\n#{trace.join("\n")}"
    end

##### State transition tables begin ###

racc_action_table = [
     6,     7,    10,     6,     7,    10,     9,    31,    14,     9,
     6,     7,    10,     6,     7,    10,     9,    31,    32,     9,
    13,    15,    16,    13,    26,     6,     7,    10,    22,    23,
    13,     9,    40,    13,    17,    18,    19,    20,    21,    46,
    15,    16,    31,    47,    31,    13,    15,    16,    15,    16,
    15,    16,    31,    37,    38,    39,    41,    31,    37,    31 ]

racc_action_check = [
     9,     9,     9,    16,    16,    16,     9,    47,     1,    16,
    15,    15,    15,     0,     0,     0,    15,    17,    17,     0,
     9,     1,     1,    16,    14,    10,    10,    10,     8,     8,
    15,    10,    25,     0,     8,     8,     8,     8,     8,    42,
    25,    25,    18,    42,    19,    10,    28,    28,    27,    27,
    24,    24,    20,    21,    22,    23,    35,    37,    38,    41 ]

racc_action_pointer = [
    11,     8,   nil,   nil,   nil,   nil,   nil,   nil,    19,    -2,
    23,   nil,   nil,   nil,    24,     8,     1,    -3,    22,    24,
    32,    47,    35,    33,    37,    27,   nil,    35,    33,   nil,
   nil,   nil,   nil,   nil,   nil,    43,   nil,    37,    52,   nil,
   nil,    39,    32,   nil,   nil,   nil,   nil,   -13,   nil ]

racc_action_default = [
   -28,   -28,    -1,    -2,    -3,    -4,    -5,    -6,    -7,   -28,
   -28,   -12,   -13,   -26,   -28,   -28,   -28,   -28,   -28,   -28,
   -28,   -28,   -28,   -28,    -8,   -28,    49,    -9,   -10,   -14,
   -20,   -24,   -25,   -15,   -16,   -28,   -18,   -28,   -28,   -27,
   -11,   -28,   -28,   -22,   -19,   -17,   -21,   -28,   -23 ]

racc_goto_table = [
    29,    33,    34,    35,    36,    30,    42,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    24,    25,   nil,   nil,
    43,    44,    27,    28,    45,   nil,   nil,   nil,   nil,   nil,
    48 ]

racc_goto_check = [
     9,     9,     9,     9,    10,    11,    12,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     1,     1,   nil,   nil,
     9,    10,     1,     1,     9,   nil,   nil,   nil,   nil,   nil,
     9 ]

racc_goto_pointer = [
   nil,     7,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -17,
   -17,   -12,   -31 ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,     5,     8,    11,    12,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 25, :_reduce_5,
  1, 25, :_reduce_6,
  1, 25, :_reduce_7,
  2, 26, :_reduce_8,
  3, 26, :_reduce_9,
  3, 26, :_reduce_10,
  3, 27, :_reduce_11,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  3, 30, :_reduce_14,
  3, 30, :_reduce_15,
  3, 30, :_reduce_16,
  5, 30, :_reduce_17,
  3, 30, :_reduce_18,
  4, 30, :_reduce_19,
  3, 31, :_reduce_20,
  3, 33, :_reduce_21,
  1, 35, :_reduce_none,
  3, 35, :_reduce_23,
  1, 32, :_reduce_24,
  1, 34, :_reduce_25,
  1, 29, :_reduce_26,
  3, 29, :_reduce_27 ]

racc_reduce_n = 28

racc_shift_n = 49

racc_token_table = {
  false => 0,
  :error => 1,
  :TRUE => 2,
  :FALSE => 3,
  :LPAREN => 4,
  :RPAREN => 5,
  :LBRACKET => 6,
  :RBRACKET => 7,
  :BANG => 8,
  :NOT => 9,
  :DOT => 10,
  :COMMA => 11,
  :AT => 12,
  :AND => 13,
  :OR => 14,
  :EQ => 15,
  :GT => 16,
  :LT => 17,
  :BETWEEN => 18,
  :IN => 19,
  :INTEGER => 20,
  :STRING => 21,
  :IDENTIFIER => 22 }

racc_nt_base = 23

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "TRUE",
  "FALSE",
  "LPAREN",
  "RPAREN",
  "LBRACKET",
  "RBRACKET",
  "BANG",
  "NOT",
  "DOT",
  "COMMA",
  "AT",
  "AND",
  "OR",
  "EQ",
  "GT",
  "LT",
  "BETWEEN",
  "IN",
  "INTEGER",
  "STRING",
  "IDENTIFIER",
  "$start",
  "predicate",
  "boolean_predicate",
  "logical_predicate",
  "group_predicate",
  "comparison_predicate",
  "variable",
  "integer_comparison_predicate",
  "string_comparison_predicate",
  "integer",
  "integer_array",
  "string",
  "integer_array_contents" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

def _reduce_5(val, _values)
 AST::True.new true 
end

def _reduce_6(val, _values)
 AST::False.new false 
end

def _reduce_7(val, _values)
 AST::BooleanVariable.new val.first 
end

def _reduce_8(val, _values)
 AST::Not.new val.last 
end

def _reduce_9(val, _values)
 AST::And.new val.first, val.last 
end

def _reduce_10(val, _values)
 AST::Or.new val.first, val.last 
end

def _reduce_11(val, _values)
 AST::Group.new val[1] 
end

# reduce 12 omitted

# reduce 13 omitted

def _reduce_14(val, _values)
 AST::IntegerEqual.new val.first, val.last 
end

def _reduce_15(val, _values)
 AST::IntegerGreaterThan.new val.first, val.last 
end

def _reduce_16(val, _values)
 AST::IntegerLessThan.new val.first, val.last 
end

def _reduce_17(val, _values)
 AST::IntegerBetween.new val.first, val[2], val.last 
end

def _reduce_18(val, _values)
 AST::IntegerIn.new val.first, val.last 
end

def _reduce_19(val, _values)
 AST::IntegerNotIn.new val.first, val.last 
end

def _reduce_20(val, _values)
 AST::StringEqual.new val.first, val.last 
end

def _reduce_21(val, _values)
 AST::IntegerArray.new val[1] 
end

# reduce 22 omitted

def _reduce_23(val, _values)
 [val.first, val.last].flatten 
end

def _reduce_24(val, _values)
 AST::Integer.new val.first.to_i 
end

def _reduce_25(val, _values)
 AST::String.new val.first 
end

def _reduce_26(val, _values)
 AST::Variable.new val.first 
end

def _reduce_27(val, _values)
 AST::Variable.new [val.first, val.last].flatten.join(".") 
end

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
  end   # module Predicator
